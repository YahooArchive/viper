/*
 * Copyright 2016, Yahoo Inc.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

package com.yahoo.viper;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.yahoo.viper.util.Utils;

/**
 * A smarter error logger for exceptions generated by background threads.
 * The logger helps to minimize the noise in the error logs by condensing continuous errors.
 */
public class ExceptionLogger {
    final Logger logger;

    private String oldMsg;
    private Level oldLevel;
    private Throwable oldException;
    private int suppressedMsgs;
    private long lastDisplayTs;

    public ExceptionLogger(Class cls) {
        logger = LoggerFactory.getLogger(cls);
    }

    private enum Level {
        ERROR,
        WARN,
        INFO
    }

    public void error(String msg, Throwable e) {
        log(Level.ERROR, msg, e);
    }

    public void warn(String msg, Throwable e) {
        log(Level.WARN, msg, e);
    }

    public void info(String msg, Throwable e) {
        log(Level.INFO, msg, e);
    }

    public void error(String msg) {
        log(Level.ERROR, msg, null);
    }

    public void warn(String msg) {
        log(Level.WARN, msg, null);
    }

    public void info(String msg) {
        log(Level.INFO, msg, null);
    }

    private void log(Level newLevel, String newMsg, Throwable e) {
        long now = Utils.getActualTime();
        newMsg = newMsg == null ? "null" : newMsg;

        if (newMsg.equals(oldMsg)) {
            suppressedMsgs++;
            if (now - lastDisplayTs < 60000) {
                // Skip printing
                return;
            }
            newMsg = null;
        }

        // Dump out suppressed messages
        if (suppressedMsgs > 0) {
            String msg = oldMsg;
            if (suppressedMsgs > 1) {
                msg += " [logged " + suppressedMsgs + " times]";
            }

            switch (oldLevel) {
                case ERROR:
                    logger.error(msg, oldException);
                    break;
                case WARN:
                    logger.warn(msg, oldException);
                    break;
                case INFO:
                    logger.info(msg, oldException);
                    break;
            }
            suppressedMsgs = 0;
        }

        // Now log the new entry
        if (newMsg != null) {
            switch (newLevel) {
                case ERROR:
                    logger.error(newMsg, e);
                    break;
                case WARN:
                    logger.warn(newMsg, e);
                    break;
                case INFO:
                    logger.info(newMsg, e);
                    break;
            }
            oldLevel = newLevel;
            oldMsg = newMsg;
            oldException = e;
        }

        lastDisplayTs = now;
    }
}
